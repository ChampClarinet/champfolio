name: Auto Tag from Package Version

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering

env:
  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

jobs:
  tag-version:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper tagging
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Read package.json version
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "Found version: v$VERSION"

      - name: Check if tag already exists
        id: check-tag
        run: |
          if git rev-parse "refs/tags/${{ steps.package-version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag ${{ steps.package-version.outputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag ${{ steps.package-version.outputs.version }} does not exist"
          fi

      - name: Create and push tag
        if: steps.check-tag.outputs.exists == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ steps.package-version.outputs.version }}" -m "Release ${{ steps.package-version.outputs.version }}"
          git push origin "${{ steps.package-version.outputs.version }}"
          echo "Created and pushed tag: ${{ steps.package-version.outputs.version }}"

      - name: Tag already exists
        if: steps.check-tag.outputs.exists == 'true'
        run: |
          echo "Skipping tag creation - ${{ steps.package-version.outputs.version }} already exists"

  notify:
    name: Notify Discord on Result
    runs-on: ubuntu-latest
    needs: [tag-version]
    if: always() # Run even if the tag job fails

    steps:
      - name: Notify Tag Failed
        if: ${{ needs.tag-version.result != 'success' }}
        run: |
          TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          curl -X POST ${{ env.DISCORD_WEBHOOK }} \
            -H "Content-Type: application/json" \
            -d @- <<EOF
          {
            "embeds": [{
              "title": "❌ Auto Tag Failed 🏷️💔",
              "description": "**Job:** tag-version\n**Status:** ${{ needs.tag-version.result }}\n**Branch:** main\n**Repo:** ${{ github.repository }}\n**By:** ${{ github.actor }}\n**Commit:** ${{ github.sha }}\n\nCheck the Actions tab for details",
              "color": 16711680,
              "timestamp": "$TIMESTAMP",
              "footer": { "text": "GitHub Actions - Auto Tag" }
            }]
          }
          EOF

      - name: Notify Tag Success
        if: ${{ needs.tag-version.result == 'success' }}
        run: |
          TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          curl -X POST ${{ env.DISCORD_WEBHOOK }} \
            -H "Content-Type: application/json" \
            -d @- <<EOF
          {
            "embeds": [{
              "title": "✅ Auto Tag Success 🎉🏷️",
              "description": "**Branch:** main\n**Repo:** ${{ github.repository }}\n**By:** ${{ github.actor }}\n**Commit:** ${{ github.sha }}\n\nNew tag created successfully!",
              "color": 65280,
              "timestamp": "$TIMESTAMP",
              "footer": { "text": "GitHub Actions - Auto Tag" }
            }]
          }
          EOF
